namespace com.ibm.streamsx.inet.sample.wsserver ;

use com.ibm.streamsx.inet.rest::WebContext ;
use com.ibm.streamsx.inet.wsserver::WebSocketInject ;
use com.ibm.streamsx.inet.wsserver::WebSocketSend ;

/**
 * Example of using the Receive() and Send() WebSocket operators. 
 * 1) Start the application.</p>
 * 2) Start up firefox on local system.
 * 3) go to "http://localhost:8080"
 * 4) select 'Start Transmitting'
 * 5) select 'Start Receiving'
 * 6) Notes the 'RECEIVED:" and 'TRANSMIT:' fields changing. 
 * 7) Move cursor into Gray box, move up/down to send data.
 */

public composite Main {
	graph
		()as WebContext_1 = WebContext(){
			param
				port : 8080 ;
				context : "html" ;
				contextResourceBase : "opt/html" ;
		}

		(stream<rstring data> Receive_2_out0)as Receive_2 = WebSocketInject(){
			param
				port : 8081 ;
				ackCount : 10;
		}
		(stream<rstring data> Functor_4_out0)as Functor_4 = Functor(Receive_2_out0){
		logic
			state:  {
				mutable list<rstring> colors = ["RED", "GREEN", "BLUE", "ORANGE", "PURPLE", "CORAL", "DEEPPINK", "LIME", "TAN", "SLATEBLUE"];
				mutable rstring  bstring;
				mutable rstring color;
				}  
		onTuple Receive_2_out0:
				{
				color = colors[(int32)(random() * 10.0)];
				// this will not work on a strictly HTML5 browser, but it's festive.
				bstring =  data + " Augment : <FONT COLOR=" + color + " >" + color + "</FONT>";
				}

		output Functor_4_out0 : data = bstring; 
		}
		

		()as Send_3 = WebSocketSend(Functor_4_out0){
			param
				port : 8082 ;
		}


}
